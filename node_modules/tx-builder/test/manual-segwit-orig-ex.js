const varuint = require('varuint-bitcoin')
// const bitcoinjs = require('bitcoinjs-lib')
const Buffer = require('safe-buffer').Buffer
// const fixture = require('./fixtures/tx-hex-decoded')
// const fixtureNode = require('./fixtures/hdnode')
// const { signBuffer } = require('../src/tx-builder')

const actual = '01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000'

const txHex = actual
const buffer = Buffer.from(txHex, 'hex')
// const keyPair = fixtureNode.keyPair
let offset = 0

// SegWit: `nVersion | marker | flag | txins | txouts | witness | nLockTime`
const version = buffer.readInt32LE(offset)
console.log(`* version = ${version}, offset=${offset}, length=4`)
offset += 4

const marker = buffer.readUInt8(offset)
console.log(`* marker = ${marker}, offset=${offset}, length=1`)
offset += 1

const flag = buffer.readUInt8(offset)
console.log(`* flag = ${flag}, offset=${flag}, length=1`)
offset += 1

// VIN:
const vinLen = varuint.decode(buffer, offset)
console.log(`* vinLen = ${vinLen}, offset=${offset}, length=${varuint.decode.bytes}`)
offset += varuint.decode.bytes

const readVin = (buffer, offset) => {
  // VIN-i:
  const hash = buffer.slice(offset, offset + 32)
  console.log(`* hash = ${hash.reverse().toString('hex')}, offset=${offset}, length=32`)
  offset += 32

  const index = buffer.readUInt32LE(offset)
  console.log(`* index = ${index}, offset=${offset}, length=4`)
  offset += 4

  const scriptSigLen = varuint.decode(buffer, offset)
  console.log(`* scriptLen = ${scriptSigLen} (${scriptSigLen.toString(16)}), offset=${offset}, length=${varuint.decode.bytes}`)
  offset += varuint.decode.bytes

  if (scriptSigLen) {
    const scriptSig = buffer.slice(offset, offset + scriptSigLen)
    console.log(`* scriptSig = ${scriptSig.toString('hex')}, offset=${offset}, length=${scriptSigLen}`)
    offset += scriptSigLen
  }

  const sequence = buffer.readUInt32LE(offset)
  console.log(`* sequence = ${sequence}, offset=${offset}, length=4`)
  offset += 4

  return offset
}

// READ VINs:
for (let i = 0; i < vinLen; i++) {
  console.log(`--- VIN-${i} ---`)
  offset = readVin(buffer, offset)
}

// VOUT
const voutLen = varuint.decode(buffer, offset)
console.log(`* voutLen = ${voutLen}, offset=${offset}, length=${varuint.decode.bytes}`)
offset += varuint.decode.bytes

// VOUT item:
const readVout = (buffer, offset) => {
  const valueA = buffer.readUInt32LE(offset)
  const valueB = buffer.readUInt32LE(offset + 4)
  const valueBB = valueB * 0x100000000
  const value = valueA + valueBB
  console.log(`* value = ${value}, offset=${offset}, length=8`)
  offset += 8

  const scriptPubKeyLen = varuint.decode(buffer, offset)
  console.log(`* scriptPubKeyLen = ${scriptPubKeyLen} (${scriptPubKeyLen.toString(16)}), offset=${offset}, length=${varuint.decode.bytes}`)
  offset += varuint.decode.bytes

  const scriptPubKey = buffer.slice(offset, offset + scriptPubKeyLen)
  console.log(`* scriptPubKey = ${scriptPubKey.toString('hex')}, offset=${offset}, length=${scriptPubKeyLen}`)
  offset += scriptPubKeyLen

  return offset
}

// READ VOUTs:
for (let i = 0; i < voutLen; i++) {
  console.log(`--- VOUT-${i} ---`)
  offset = readVout(buffer, offset)
}

// Witnesses
const witnessesLen = varuint.decode(buffer, offset)
console.log(`* witnessesLen = ${witnessesLen}, offset=${offset}, length=${varuint.decode.bytes}`)
offset += varuint.decode.bytes

// READ Witnesses:
for (let i = 0; i < witnessesLen; i++) {
  console.log(`--- Witness-${i} ---`)
  offset = readWitness(buffer, offset)
}

function readWitness (buffer, offset) {
  const witnessLen = varuint.decode(buffer, offset)
  console.log(`* witnessLen = ${witnessLen}, offset=${offset}, length=${varuint.decode.bytes}`)
  offset += varuint.decode.bytes

  if (witnessLen) {
    const scriptSig = buffer.slice(offset, offset + witnessLen)
    console.log(`* scriptSig = ${scriptSig.toString('hex')}, offset=${offset}, length=${witnessLen}`)
    offset += witnessLen
  }

  return offset
}

// Locktime
const locktime = buffer.readUInt32LE(offset)
console.log(`* locktime = ${locktime}, offset=${offset}, length=4`)
offset += 4

console.log(`BUFFER LEFT = ${buffer.slice(offset).toString('hex')}`)
