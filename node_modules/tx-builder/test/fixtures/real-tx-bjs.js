const bitcoin = require('bitcoinjs-lib')
// const fixture = require('./hdnode')
// const Transaction = bitcoin.Transaction
const TransactionBuilder = bitcoin.TransactionBuilder

// From: tb1q8jr3q3s0cc7j0en5rhgeylcweeq7nd246575ce (addr0)
// txid: b6ecf4406bf054eb4d027057a7b8985c3decb09fd2c1680e88361db163181b7d
// vout: 0
// To: tb1qhn6l3jl02la469u5ad3x5a6juvw3k24tpxqxsx (addr1)
const prevTx = 'b6ecf4406bf054eb4d027057a7b8985c3decb09fd2c1680e88361db163181b7d'
const address = 'tb1qhn6l3jl02la469u5ad3x5a6juvw3k24tpxqxsx'
// const keyPair = fixture.keyPair
const privKey = 'cNUnpYpMsJXYCERYBciJnsWBpcYEFjdcbq6dxj4SskGhs7uHuJ7Q'
const keyPair = bitcoin.ECPair.fromWIF(privKey, bitcoin.networks.testnet)
const p2wpkh = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network: bitcoin.networks.testnet })

const txb = new TransactionBuilder(bitcoin.networks.testnet)
txb.addInput(prevTx, 0, 0, p2wpkh.output) // NOTE: provide the prevOutScript!
txb.addOutput(address, 1000)
txb.sign(0, keyPair, null, null, 2000) // NOTE: no redeem script

const tx = txb.build()
console.log(`tx.toHex = `, tx.toHex())

// 020000000001017d1b1863b11d36880e68c1d29fb0ec3d5c98b8a75770024deb54f06b40f4ecb600000000000000000001e803000000000000160014bcf5f8cbef57fb5d1794eb626a7752e31d1b2aab02483045022100f3df3c3833c0c27dfca080928606b7643977317e6988c3ca6320aee5df9f813002202c627d82fb4553c6089f0dc74c50d7a43b0c8d3363eb5e4898d8c17cfc2927310121038262a6c6cec93c2d3ecd6c6072efea86d02ff8e3328bbd0242b20af3425990ac00000000
